<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pierangelo Cecchetto</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Pierangelo Cecchetto</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking endpoints with ZIO sttp</title>
      <link>http://localhost:1313/post/2020-07-10-zio-sttp/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-07-10-zio-sttp/</guid>
      <description>&lt;p&gt;How to use ZIO modules together with STTP&lt;/p&gt;</description>
    </item>
    <item>
      <title>Referential Transparency</title>
      <link>http://localhost:1313/post/2018-06-01-on-rt-and-fp/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2018-06-01-on-rt-and-fp/</guid>
      <description>&lt;p&gt;On the benefits and consequences of Referential Transparency&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started with Apache Camel</title>
      <link>http://localhost:1313/post/2015-07-06-ride-the-camel-1/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2015-07-06-ride-the-camel-1/</guid>
      <description>&lt;h3 id=&#34;context&#34;&gt;Context&lt;/h3&gt;&#xA;&lt;p&gt;Any application in an enterprise context, regardless how small this context might be, must relate with other systems. These systems might be File system, databases, webservices, message queues, logging systems, or systems using a particular communication protocol. Moreover, data typically undergo transformations, switching and routing logics before reaching other systems. The variety of combinations this allows is enormous, and tackling each of these in a hand made, custom way might easily become an integration nightmare. &lt;em&gt;Enterprise Integration Patterns&lt;/em&gt; (EIP) establish a standard way to describe and identify the different approaches that one can follow to deal with an integration problem (see &lt;a href=&#34;http://www.enterpriseintegrationpatterns.com&#34;&gt;http://www.enterpriseintegrationpatterns.com&lt;/a&gt;). They establish a common vocabulary that can be used unambiguously when talking about integration. If we consider that integration solutions are ubuquitous in application development, we realize easily how convenient it might be to have solid foundations on this subject.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scala.js for dynamic systems simulation</title>
      <link>http://localhost:1313/post/2015-04-12-scalajs-for-dynamic-systems-simulation/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2015-04-12-scalajs-for-dynamic-systems-simulation/</guid>
      <description>&lt;p&gt;After the Scaladays 2015 in SF, a lot of echo has involved the &lt;a href=&#34;http://www.scala-js.org&#34;&gt;Scala.js&lt;/a&gt; framework. Scala.js compiles Scala code into Javascript code, which can be run in a browser but also on Javascript powered server environments e.g. Node.js.&lt;/p&gt;&#xA;&lt;p&gt;Scala.js is not something like GWT, which provided a whole toolkit for Javascript code generation from Java. Scala.js is simply a compiler that translates Scala code into Javascript code. This allows to use all the great features that make Scala such a successful language, like strong typing, functional code, higher order functions, case classes, pattern matching, and even Future and Promises (when dealing e.g. with events on the client or with Ajax calls).&#xA;For some parts it is possible to develop code that is fully agnostic of the target platform, i.e. you can write some Scala code that can be executed equivalently on a JVM or on a browser when compiled with Scala.js. For the parts that deal with HTML elements or with Ajax, the target platform must be taken into consideration.&#xA;The advantage that Scala.js offers is, on top of the pleasure of using a concise and expressive language like Scala, that due to the strong typing it allows to discover errors already in the compilation phase, while as we know when we develop logic in Javascript, most of the times we discover errors only at runtime.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simple Scala application: calculating integrals</title>
      <link>http://localhost:1313/post/2015-04-06-integrals-in-scala/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2015-04-06-integrals-in-scala/</guid>
      <description>&lt;p&gt;I embraced functional programming through Scala starting with the great Marting Odersky&amp;rsquo;s course on Coursera, following with the Reactive Programming course in Coursera (a second edition of which will start shortly and I really recommend you to sign up and follow it), and later on working with Play framework and Akka streams.&lt;/p&gt;&#xA;&lt;p&gt;I spent a few years programming in Java in a purely imperative way, and as soon as I could understand the functional approach, I realized it is a great way to focus on the essence of the problem, and it provides a more organic way to decompose reasoning and handling complexity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parallelizing costs</title>
      <link>http://localhost:1313/post/2015-03-02-price-of-locks/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2015-03-02-price-of-locks/</guid>
      <description>&lt;h4 id=&#34;why-learning-concurrency&#34;&gt;Why learning concurrency&lt;/h4&gt;&#xA;&lt;p&gt;Studying for the OCP exam offers a nice opportunity to dive into one of the most important (and sometimes overlooked) aspects of the Java language and JVM: threads and concurrency frameworks.&#xA;Before I never delved into the details about concurrency just because I have been working on a container (like Tomcat) or on a framework (like Apache Camel) that takes care of distributing load on a thread pool, and basically every request or every message processing can in 99% of cases be treated as a synchronous process, so I survived for many years without having a good understanding of how concurrency works in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shortcodes</title>
      <link>http://localhost:1313/post/2014-10-22-some-notes-about-java-certification-exam/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2014-10-22-some-notes-about-java-certification-exam/</guid>
      <description>&lt;p&gt;With this post I am starting my blog, and I dedicate it (like probably the next few ones) to topics I am encountering during the preparation of the Java Professional Certification exam.&#xA;Even if you probably have been using Java for many years, Java certification offers an opportunity to discover details about the language and its features.&#xA;In the following notes I am collecting a few points that I found at least not obvious, either because I never had the chance to look into them before, or because they showed some peculiar behavior worth keeping in mind. The following notes refer to Java 7.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
